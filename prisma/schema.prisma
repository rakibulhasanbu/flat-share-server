generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRoles {
  USER
  ADMIN
}

model User {
  id        String       @id @default(uuid())
  name   String
  username   String    @unique
  email      String    @unique
  password   String
  isActive   Boolean   @default(true)
  role        UserRoles?   @default(USER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profile   UserProfile?
  flats     Flat[]    @relation("PostedFlats")
  bookings  Booking[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  profession String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Flat {
  id                   String       @id @default(uuid())
  location             String
  description          String
  amount               Int
  squareFeet           Int
  totalBedrooms        Int
  totalRooms           Int
  amenities            String[]
  photos               String[]
  availability         Boolean      @default(true)
  advanceAmount        Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  bookings             Booking[]

  postedById           String
  postedBy     User    @relation("PostedFlats", fields: [postedById], references: [id])

  @@map("flats")
}


model Booking {
  id        String    @id @default(uuid())
  flatId    String
  userId    String
  message   String?
  status    BookingStatus  @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  flat      Flat      @relation(fields: [flatId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

   @@map("bookings")
}